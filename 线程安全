多线程操作共享数据不会出现异常数据就是线程安全的
线程安全问题导致数据错误大致两种情况
  1.同一块数据内存,被同时写,这样数据就乱了
  2.逻辑错误,多线程操作时,一边正在写入,一边正在读取 
atomic的安全机制
atomic是原子性的 nonatomic是非原子性的
atomic不能保证多线程安全,但是能保证数据完整性,能够取出来值
atomic的原子性只能保证读写的事务操作不会被中断,不会出现同时操作同一块内存空间的情况
是对setter,getter方法进行了加锁,保证了setter,getter方法的线程安全
但是不能保证整个对象是线程安全的
readwrite 修饰的只会生成setter,getter方法
readonly 修饰的只会生成getter方法 可以直接访问实例变量
assign 修饰的属性的setter方法是执行简单的赋值操作
weak 修饰属性的setter方法不保留新值  也不释放旧值  不会是引用计数+1 当对象释放的适合,置为nil
strong 是ARC里面的,相当于MRC里面的retain 引用计数+1 修饰属性的setter 会保留新值 再释放旧值
unsafe_unretained 和assign类似,是不安全的 不会强引用对象 和weak区别是当指向对象释放时,不会置为nil,所以不安全
copy 持有对象,引用计数+1 修饰的setter方法不会保留新值,会调用对象的copy方法拷贝一份  遵循NSCopying协议 - copyWithZone方法
copy 浅拷贝 只拷贝指向同一内存的地址  
mutableCopy是深拷贝 重新拷贝一份对象  指向的是不同内存地址
